{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "references": [
    { "path": "../" },
  ],
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    },
    "strict": true,
    "noEmit": true,
    // For bundlers
    "module": "ESNext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "allowImportingTsExtensions": true,
    // Even files without `import` or `export` are treated as modules.
    // It helps to avoid mysterious errors such as `Cannot redeclare block-scoped variable 'name`.
    // https://www.totaltypescript.com/cannot-redeclare-block-scoped-variable#solution-3-your-module-isnt-a-module
    "moduleDetection": "force",

    // Required in Vue projects
    "jsx": "preserve",
    "jsxImportSource": "vue",

    // See <https://www.semver-ts.org/formal-spec/5-compiler-considerations.html#strictness>
    // These 2 options are also part of the recommended tsconfig as of TS 5.9
    "noUncheckedIndexedAccess": true,
    // Commented out for now. It's hard to land in the current ecosystem.
    // Needs more consensus before moving forward.
    // "exactOptionalPropertyTypes": true,

    // <https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/#verbatimmodulesyntax>
    // Any imports or exports without a type modifier are left around. This is important for `<script setup>`.
    // Anything that uses the type modifier is dropped entirely.
    "verbatimModuleSyntax": true,

    // For Vite, the actual compilation target is determined by the
    // `build.target` option in the Vite config.
    // So don't change the `target` field here. It has to be
    // at least `ES2020` for dynamic `import()`s and `import.meta` to work correctly.
    "target": "ESNext",
    // For spec compliance.
    // `true` by default if the `target` is `ES2020` or higher.
    "useDefineForClassFields": true,

    // Recommended
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "libReplacement": false,
    // See <https://github.com/vuejs/vue-cli/pull/5688>
    "skipLibCheck": true,
  }
}
